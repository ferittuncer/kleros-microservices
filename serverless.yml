service: kleros-microservices
provider:
    name: aws
    runtime: nodejs8.10
    stage: '${opt:stage, self:custom.defaultStage}'
    region: us-east-2
package:
    exclude:
        - .env
environment:
    AWS_REGION: '${self:provider.region}'
plugins:
    - serverless-kms-secrets
    - serverless-iam-roles-per-function
    - serverless-aws-documentation
custom:
    defaultStage: staging
    environments:
        staging: STAGING
        production: PRODUCTION
    serverless-kms-secrets:
        secretsFile: 'kms-secrets.${self:provider.region}.yml'
    kmsSecrets: '${file(kms-secrets.${self:provider.region}.yml)}'
    documentation:
        info:
            version: '1'
            title: 'Kleros Microservices'
            description: 'Collection of Kleros microservices.'
        resources:
            - {path: doges-on-trial, description: 'Microservices for the Doges on Trial dapp.'}
        models:
            - {name: ErrorResponse, description: 'An error response.', contentType: application/json, schema: '${file(src/models/error.json)}'}
            - {name: PatchUserSettingsRequest, description: 'The request for patchUserSettings.', contentType: application/json, schema: '${file(src/global/models/user-settings.json):patch.request}'}
            - {name: PatchUserSettingsResponse, description: 'The response for patchUserSettings.', contentType: application/json, schema: '${file(src/global/models/user-settings.json):patch.response}'}
            - {name: PostDogesOnTrialDogeImagesRequest, description: 'The request for postDogesOnTrialDogeImages.', contentType: application/json, schema: '${file(src/doges-on-trial/models/doge-images.json):post.request}'}
            - {name: PostDogesOnTrialDogeImagesResponse, description: 'The response for postDogesOnTrialDogeImages.', contentType: application/json, schema: '${file(src/doges-on-trial/models/doge-images.json):post.response}'}
functions:
    patchUserSettings:
        handler: src/global/user-settings.patch
        events:
            - {http: {path: user-settings, method: patch, cors: true}}
        environment:
            INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
        iamRoleStatementsName: 'patchUserSettings-${self:provider.stage}-lambda-role'
        iamRoleStatements:
            - {Effect: Allow, Action: ['KMS:Decrypt'], Resource: '${self:custom.kmsSecrets.keyArn}'}
            - {Effect: Allow, Action: ['dynamodb:UpdateItem'], Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings'}
        documentation:
            summary: 'Update user settings.'
            description: 'Update user settings for an Ethereum address.'
            requestModels: {application/json: PatchUserSettingsRequest}
            methodResponses: [{statusCode: '200', responseModels: {application/json: PatchUserSettingsResponse}}, {statusCode: '400', responseModels: {application/json: ErrorResponse}}]
    postDogesOnTrialDogeImages:
        handler: src/doges-on-trial/doge-images.post
        events:
            - {http: {path: doges-on-trial/doge-images, method: post, cors: true}}
        environment:
            INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
            ARBITRABLE_PERMISSION_LIST_ADDRESS: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_ARBITRABLE_PERMISSION_LIST_ADDRESS}'
            DOGES_ON_TRIAL_DOGE_IMAGES_S3_BUCKET: '${self:provider.stage}-doges-on-trial-doge-images'
        iamRoleStatementsName: 'postDogesOnTrialDogeImages-${self:provider.stage}-lambda-role'
        iamRoleStatements:
            - {Effect: Allow, Action: ['KMS:Decrypt'], Resource: '${self:custom.kmsSecrets.keyArn}'}
            - {Effect: Allow, Action: ['s3:PutObject', 's3:PutObjectAcl'], Resource: 'arn:aws:s3:::${self:provider.stage}-doges-on-trial-doge-images/*'}
        documentation:
            summary: 'Upload a doge image.'
            description: 'The image hash must be added to the contract first.'
            requestModels: {application/json: PostDogesOnTrialDogeImagesRequest}
            methodResponses: [{statusCode: '200', responseModels: {application/json: PostDogesOnTrialDogeImagesResponse}}, {statusCode: '400', responseModels: {application/json: ErrorResponse}}]
